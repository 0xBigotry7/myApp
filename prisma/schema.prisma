// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String           @id @default(cuid())
  email       String           @unique
  password    String
  name        String
  createdAt   DateTime         @default(now())
  trips       Trip[]
  expenses    Expense[]
  preferences UserPreference[]
}

model Trip {
  id                   String            @id @default(cuid())
  name                 String
  destination          String
  startDate            DateTime
  endDate              DateTime
  totalBudget          Float
  currency             String            @default("USD")
  description          String?
  imageUrl             String?
  destinationImageUrl  String?
  budgetImageUrl       String?
  itineraryImageUrl    String?
  expensesImageUrl     String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  userId               String
  user                 User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  budgetCategories     BudgetCategory[]
  expenses             Expense[]
  activities           Activity[]
  places               Place[]
}

model BudgetCategory {
  id           String   @id @default(cuid())
  tripId       String
  category     String
  budgetAmount Float
  trip         Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model Expense {
  id         String   @id @default(cuid())
  tripId     String
  userId     String
  amount     Float
  category   String
  currency   String   @default("USD")
  date       DateTime
  note       String?
  receiptUrl String?
  location   String?
  createdAt  DateTime @default(now())
  trip       Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Activity {
  id          String   @id @default(cuid())
  tripId      String
  title       String
  description String?
  date        DateTime
  startTime   String?
  endTime     String?
  location    String?
  latitude    Float?
  longitude   Float?
  category    String?
  estimatedCost Float?
  actualCost  Float?
  notes       String?
  order       Int      @default(0)
  isAiGenerated Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model Place {
  id          String   @id @default(cuid())
  tripId      String
  name        String
  description String?
  address     String?
  latitude    Float?
  longitude   Float?
  category    String?
  rating      Float?
  priceLevel  Int?
  website     String?
  phone       String?
  notes       String?
  visited     Boolean  @default(false)
  createdAt   DateTime @default(now())
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model UserPreference {
  id          String   @id @default(cuid())
  userId      String
  key         String
  value       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
}
