// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(cuid())
  email                 String                  @unique
  password              String
  name                  String
  createdAt             DateTime                @default(now())
  ownedTrips            Trip[]                  @relation("TripOwner")
  sharedTrips           TripMember[]
  expenses              Expense[]
  preferences           UserPreference[]
  accounts              Account[]
  transactions          Transaction[]
  budgets               Budget[]
  savingsGoals          SavingsGoal[]
  recurringTransactions RecurringTransaction[]
  netWorthSnapshots     NetWorthSnapshot[]
  categoryRules         CategoryRule[]
  periodCycles          PeriodCycle[]
  dailyLogs             DailyLog[]
  healthInsights        HealthInsight[]
}

model Trip {
  id                   String            @id @default(cuid())
  name                 String
  destination          String
  startDate            DateTime
  endDate              DateTime
  totalBudget          Float
  currency             String            @default("USD")
  description          String?
  imageUrl             String?
  destinationImageUrl  String?
  budgetImageUrl       String?
  itineraryImageUrl    String?
  expensesImageUrl     String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  ownerId              String
  owner                User              @relation("TripOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members              TripMember[]
  budgetCategories     BudgetCategory[]
  expenses             Expense[]
  activities           Activity[]
  places               Place[]
}

model BudgetCategory {
  id           String   @id @default(cuid())
  tripId       String
  category     String
  budgetAmount Float
  trip         Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model Expense {
  id          String   @id @default(cuid())
  tripId      String
  userId      String
  amount      Float
  category    String
  currency    String   @default("USD")
  date        DateTime
  note        String?
  receiptUrl  String?
  location    String?
  createdAt   DateTime @default(now())
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Activity {
  id          String   @id @default(cuid())
  tripId      String
  title       String
  description String?
  date        DateTime
  startTime   String?
  endTime     String?
  location    String?
  latitude    Float?
  longitude   Float?
  category    String?
  estimatedCost Float?
  actualCost  Float?
  notes       String?
  order       Int      @default(0)
  isAiGenerated Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model Place {
  id          String   @id @default(cuid())
  tripId      String
  name        String
  description String?
  address     String?
  latitude    Float?
  longitude   Float?
  category    String?
  rating      Float?
  priceLevel  Int?
  website     String?
  phone       String?
  notes       String?
  visited     Boolean  @default(false)
  createdAt   DateTime @default(now())
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model UserPreference {
  id          String   @id @default(cuid())
  userId      String
  key         String
  value       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
}

model TripMember {
  id        String   @id @default(cuid())
  tripId    String
  userId    String
  role      String   @default("member") // "owner" or "member"
  joinedAt  DateTime @default(now())
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tripId, userId])
}

// ===== GENERAL FINANCE MODELS =====

model Account {
  id               String        @id @default(cuid())
  userId           String
  name             String
  type             String        // "checking", "savings", "credit_card", "cash", "investment"
  balance          Float         @default(0)
  currency         String        @default("USD")
  isActive         Boolean       @default(true)
  icon             String?       // emoji or icon name
  color            String?       // hex color for UI
  notes            String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions     Transaction[]
  savingsGoals     SavingsGoal[]
}

model Budget {
  id              String           @id @default(cuid())
  userId          String
  month           Int              // 1-12
  year            Int
  totalIncome     Float            @default(0)
  totalAllocated  Float            @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  envelopes       BudgetEnvelope[]

  @@unique([userId, month, year])
}

model BudgetEnvelope {
  id          String   @id @default(cuid())
  budgetId    String
  category    String   // "Groceries", "Rent", "Entertainment", etc.
  allocated   Float    // amount allocated this month
  spent       Float    @default(0)
  rollover    Float    @default(0) // unused from last month
  icon        String?  // emoji
  color       String?  // hex color
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  budget      Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)

  @@unique([budgetId, category])
}

model Transaction {
  id                    String                 @id @default(cuid())
  userId                String
  accountId             String
  amount                Float
  category              String
  merchantName          String?
  description           String?
  date                  DateTime
  tags                  String[]               @default([])
  isTripRelated         Boolean                @default(false)
  tripId                String?
  isRecurring           Boolean                @default(false)
  recurringTransactionId String?
  receiptUrl            String?
  location              String?
  latitude              Float?
  longitude             Float?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  account               Account                @relation(fields: [accountId], references: [id], onDelete: Cascade)
  recurringTransaction  RecurringTransaction?  @relation(fields: [recurringTransactionId], references: [id])
}

model RecurringTransaction {
  id            String        @id @default(cuid())
  userId        String
  name          String        // "Netflix Subscription", "Rent", etc.
  amount        Float
  category      String
  frequency     String        // "monthly", "weekly", "yearly", "biweekly"
  startDate     DateTime
  endDate       DateTime?     // null for ongoing
  nextDate      DateTime      // next expected date
  merchantName  String?
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
}

model SavingsGoal {
  id             String   @id @default(cuid())
  userId         String
  name           String   // "Emergency Fund", "Vacation to Japan", etc.
  targetAmount   Float
  currentAmount  Float    @default(0)
  targetDate     DateTime?
  linkedAccountId String?
  icon           String?  // emoji
  color          String?  // hex color
  isCompleted    Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  linkedAccount  Account? @relation(fields: [linkedAccountId], references: [id])
}

model NetWorthSnapshot {
  id          String   @id @default(cuid())
  userId      String
  date        DateTime
  assets      Float    // total value of all assets
  liabilities Float    // total value of all debts
  netWorth    Float    // assets - liabilities
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
}

model CategoryRule {
  id         String   @id @default(cuid())
  userId     String
  merchant   String   // merchant name pattern
  category   String   // auto-assign this category
  confidence Float    @default(1.0) // 0-1, how sure we are
  timesUsed  Int      @default(0) // how many times this rule has been applied
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, merchant])
}

// ===== PERIOD TRACKING MODELS =====

model PeriodCycle {
  id                  String     @id @default(cuid())
  userId              String
  startDate           DateTime   // First day of period
  endDate             DateTime?  // Last day of period (null if ongoing)
  cycleLength         Int?       // Days from start of this period to start of next
  periodLength        Int?       // Duration of the period in days
  flowIntensity       String?    // "light", "medium", "heavy"
  predictedStartDate  DateTime?  // AI predicted start for next cycle
  predictedEndDate    DateTime?  // AI predicted end for this cycle
  ovulationDate       DateTime?  // Predicted/tracked ovulation date
  fertileWindowStart  DateTime?  // Predicted fertile window start
  fertileWindowEnd    DateTime?  // Predicted fertile window end
  notes               String?
  isComplete          Boolean    @default(false) // True when cycle ends (next period starts)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  user                User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  dailyLogs           DailyLog[]
}

model DailyLog {
  id                String       @id @default(cuid())
  userId            String
  cycleId           String?
  date              DateTime
  flowIntensity     String?      // "spotting", "light", "medium", "heavy"
  symptoms          String[]     @default([]) // ["cramps", "headache", "bloating", "breast_tenderness", "acne", "back_pain"]
  mood              String[]     @default([]) // ["happy", "sad", "anxious", "irritable", "energetic", "tired"]
  energyLevel       Int?         // 1-5 scale
  sleepQuality      Int?         // 1-5 scale
  sexualActivity    Boolean      @default(false)
  notes             String?
  weight            Float?       // Optional weight tracking
  temperature       Float?       // Basal body temperature
  cervicalMucus     String?      // "dry", "sticky", "creamy", "watery", "egg_white"
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  cycle             PeriodCycle? @relation(fields: [cycleId], references: [id], onDelete: SetNull)

  @@unique([userId, date])
  @@index([userId, date])
}

model HealthInsight {
  id            String   @id @default(cuid())
  userId        String
  type          String   // "cycle_prediction", "symptom_pattern", "health_tip", "ovulation_prediction"
  title         String
  content       String   // AI-generated insight
  severity      String?  // "info", "warning", "urgent" - for health concerns
  isRead        Boolean  @default(false)
  relevantDate  DateTime? // Date this insight is relevant to
  cycleIds      String[] @default([]) // Related cycle IDs
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}
